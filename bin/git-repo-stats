#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

my $PATH_PREFIX = '';
my $EXCLUDE_BLANK_LINES = 0;
GetOptions("exclude-blank-lines" => \$EXCLUDE_BLANK_LINES) || exit 1;
if (@ARGV) {
    $PATH_PREFIX = shift(@ARGV);
}

my %stats = &stats;
my %totals = &totals(%stats);
my @authors = &authors(%stats);

# Figure out the column widths
my $col0_length = length("Author");
my $col1_length = length("Current");
my $col2_length = length("Historical");
foreach my $author (@authors) {
    if (length($author) > $col0_length) {
        $col0_length = length($author);
    }
}

# Output
my $line_format = "% -${col0_length}s % ${col1_length}s % ${col2_length}s\n";
printf($line_format, "Author", "Current", "Historical");
print "" . ("-" x ($col0_length + $col1_length + $col2_length + 2)) . "\n";
foreach my $author (@authors) {
    printf(
        $line_format,
        $author,
        &percentage($totals{'blame'}, $stats{'blame'}{$author}),
        &percentage($totals{'log'}, $stats{'log'}{$author})
    );
}

sub authors {
    my %stats = @_;

    my %authors;
    foreach (keys %{$stats{'blame'}}) { $authors{$_} = 1 }
    foreach (keys %{$stats{'log'}}) { $authors{$_} = 1 }

    return sort {$stats{'blame'}{$b} <=> $stats{'blame'}{$a}} keys %authors;
}

sub percentage {
    my $total = shift;
    my $value = shift || 0;

    return "0%" unless $total;
    return sprintf('%.2f%%', ($value / $total) * 100)
}

sub stats {
    my %stats;

    my $mailmap = '';
    if (-f "$ENV{HOME}/.mailmap") {
        $mailmap = "-c mailmap.file=$ENV{HOME}/.mailmap"
    } else {
        my $git_root = `git rev-parse --show-toplevel`; chomp $git_root;
        if (-d $git_root && -d "$git_root/.mailmap") {
            $mailmap = "-c mailmap.file=$git_root/.mailmap"
        }
    }

    foreach my $file (&files) {
        my %blame = &blame($file, $mailmap);
        my %log = &log($file, $mailmap);

        foreach (keys %log) {
            $stats{'log'}{$_} += $log{$_};
        }
        foreach (keys %blame) {
            $stats{'blame'}{$_} += $blame{$_};
        }
    }
    return %stats;
}

sub totals {
    my %stats = @_;

    my %totals;
    foreach my $author (keys %{$stats{'blame'}}) {
        $totals{'blame'} += $stats{'blame'}{$author};
    }
    foreach my $author (keys %{$stats{'log'}}) {
        $totals{'log'} += $stats{'log'}{$author};
    }

    return %totals;
}

sub files {
    my @files;
    if (open(LS, "git grep --cached -I -l -e ''|")) {
        while (<LS>) {
            chomp;
            if (-f $_ && (!($PATH_PREFIX) || /^$PATH_PREFIX/)) {
                push @files, $_;
            }
        }
    }
    return @files;
}

sub blame {
    my $file = shift;
    my $mailmap = shift;

    my @lines;
    if (open(BLAME, "git $mailmap blame --line-porcelain $file|")) {
        my $line;
        while (<BLAME>) {
            chomp;
            if (/^[0-9a-f]+ \d+ \d+(?: \d+)?$/o) {
                # [Commit hash] [original line] [final line] [number of lines]
                push @lines, $line;
                $line = {};
            } else {
                if (/^([a-zA-Z0-9-]+)\s+(.*)$/) {
                    $line->{$1} = $2;
                } else {
                    $line->{'line'} = $_;
                }
            }
        }
    }

    my %stats;
    foreach my $line (@lines) {
        if (defined($line)) {
            unless ($EXCLUDE_BLANK_LINES && $line->{'line'} =~ /^\s*$/o) {
                $stats{$line->{'author'}}++;
            }
        }
    }
    return %stats;
}

sub log {
    my $file = shift;
    my $mailmap = shift;

    my %stats;
    my $author;
    if (open(LOG, "git $mailmap log --stat --format='format:author %aN' $file|")) {
        while (<LOG>) {
            chomp;
            if (/^author (.*)$/o) {
                $author = $1;
            } elsif (/^ 1 file changed(?:, (\d+) insertions?...)?(?:, (\d+) deletions?...)?/o) {
                my $inserts = $1 || 0;
                my $deletes = $2 || 0;
                $stats{$author} += ($inserts + $deletes);
            }
        }
    }
    return %stats;
}
