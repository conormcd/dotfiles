#!/bin/sh

set -o errexit
set -o nounset

BREW_PREFIX=$(brew --prefix)
BREW_TAPS="homebrew/dupes homebrew/versions josegonzalez/php"
HOSTNAME=$(hostname)
OS=$(uname -s)

# Get the full path to the current directory.
cwd=$(pwd)
cd $(dirname $0)
root=$(pwd)
cd ${cwd}

# Symlink a bash completion file
bash_completion() {
  completion_file=$1
  completion_dir=/etc/bash_completion.d
  if which brew > /dev/null 2>&1; then
    completion_dir="${BREW_PREFIX}${completion_dir}"
  fi
  symlink ${completion_file} ${completion_dir}/$(basename ${completion_file})
}

bytemark_box() {
  [ ${HOSTNAME} = "mcdermottr.vm.bytemark.co.uk" ]
}

# Print the command we're going to run and (if DRY_RUN is not set) run it.
cmd() {
  echo $*
  if [ ${DRY_RUN:-unset} = "unset" ]; then
    $*
  fi
}

decrypt() {
  local file=$1
  local pass_file=${HOME}/.dotfiles_password

  if ! which openssl > /dev/null 2>&1; then
    echo "Can't encrypt or decrypt without openssl"
    return 1
  fi
  if [ ! -f ${pass_file} ]; then
    echo "Can't encrypt or decrypt without ${pass_file}"
    return 1
  fi
  if [ "X$(echo ${file} | grep '\.enc$')X" = "XX" ]; then
    echo "Refusing to decrypt a file unless it ends in .enc"
    return 1
  fi
  file=$(echo ${file} | sed -e 's/\.enc$//')

  cmd openssl enc -d -aes-256-cbc -a -salt -in ${file}.enc -out ${file} -pass file:${pass_file}
}

encrypt() {
  local file=$1
  local pass_file=${HOME}/.dotfiles_password

  if ! which openssl > /dev/null 2>&1; then
    echo "Can't encrypt or decrypt without openssl"
    return 1
  fi
  if [ ! -f ${pass_file} ]; then
    echo "Can't encrypt or decrypt without ${pass_file}"
    return 1
  fi

  cmd openssl enc -aes-256-cbc -a -salt -in ${file} -out ${file}.enc -pass file:${pass_file}
}

# Ensure a package is installed
pkg() {
  for package_name in $*; do
    case ${OS} in
      (Darwin)
        # Make sure homebrew is installed
        if ! which brew > /dev/null 2>&1; then
          cmd ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"
          for tap in ${BREW_TAPS}; do
            if [ "$(brew tap | grep ${tap})" != "${tap}" ]; then
              cmd brew tap ${tap}
            fi
          done
        fi

        # Adjust the installer, package name and/or compile flags if necessary.
        installer="brew"
        flags=""
        case ${package_name} in
          (boto|httpie|paramiko|pyflakes|requests|requests-oauth|tornado)
            installer="pip"
            ;;
          (imagick)
            (pkg php)
            package_name=php54-imagick
            ;;
          (php)
            package_name=php54
            flags="--with-mysql --with-pgsql --with-fpm"
            ;;
          (ruby)
            package_name=ruby193
            ;;
          (bundler|twig|vagrant)
            installer="gem"
            ;;
          (apc|xdebug|xhprof)
            package_name="php54-${package_name}"
            ;;
        esac

        # Trigger the install
        case ${installer} in
          (brew)
            if ! brew list ${package_name} > /dev/null; then
              cmd brew install ${package_name} ${flags}
            fi
            ;;
          (gem)
            # Make sure the Homebrew ruby is installed first.
            (pkg ruby)

            # Now install the gem if necessary
            if [ "$(gem list ${package_name} | grep ${package_name})" = "" ]; then
              cmd gem install ${package_name}

              # Relink ruby to ensure that any of the binaries installed by the
              # gem are linked into /usr/local/bin
              _ruby_pkg=$(brew which-package ${BREW_PREFIX}/bin/ruby)
              if [ "X${_ruby_pkg}X" != "XX" ]; then
                cmd brew unlink ${_ruby_pkg}
                cmd brew link ${_ruby_pkg}
              fi
            fi
            ;;
          (pip)
            if ! which pip > /dev/null 2>&1; then
              if [ ${DRY_RUN:-set} != "set" ]; then
                curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | sudo python
              else
                echo "[Install pip]"
              fi
            fi

            package_dir=/Library/Python/2.7/site-packages/${package_name}
            if [ ${package_name} = "requests-oauth" ]; then
              package_dir=/Library/Python/2.7/site-packages/oauth_hook
            fi
            if [ ! -d ${package_dir} ]; then
              cmd sudo pip install ${package_name}
            fi
            ;;
          (*)
            # This should be unreachable.
            echo "Invalid installer: ${installer}"
            exit 1
            ;;
        esac
        ;;
      (Linux)
        if [ -f /etc/debian_version ]; then
          case ${package_name} in
            (ctags)
              package_name="exuberant-ctags"
              ;;
          esac
          if ! dpkg -s ${package_name} > /dev/null 2>&1; then
            cmd sudo aptitude install ${package_name}
          fi
        else
          echo "Unsupported Linux variant."
          exit 1
        fi
        ;;
    esac
  done
}

# Add a PEAR channel
pear_channel() {
  for channel in $*; do
    if ! pear channel-info ${channel} > /dev/null 2>&1; then
      cmd pear channel-discover ${channel}
    fi
  done
}

# Install a PEAR package
pear_install() {
  package_name=$1
  if [ $# -gt 1 ]; then
    package_source=$2
  else
    package_source=$1
  fi
  if which pear > /dev/null 2>&1; then
    if [ "X$(pear list -a | grep ^${package_name}\ )X" = "XX" ]; then
      cmd pear install --alldeps ${package_source}
    fi
  else
    pkg php
  fi
}

# Symlink a file from this repo.
symlink() {
  file=$1
  if [ $# -gt 1 ]; then
    target=$2
    if [ "$(echo ${target} | grep ^/)" != "${target}" ]; then
      target=${HOME}/${target}
    fi
  else
    target=${HOME}/${file}
  fi
  if [ "$(echo ${file} | grep ^/)" != "${file}" ]; then
    file="${root}/${file}"
  fi
  if [ ! -L ${target} ] || [ $(readlink ${target}) != ${file} ]; then
    cmd ln -fns ${file} ${target}
  fi
}

#
# Now work through all the things we need.
#

# First, sort out any encrypted files
for cipherfile in $(find ${root} -type f -name '*.enc'); do
  plainfile=$(echo ${cipherfile} | sed -e 's/\.enc$//')

  # Make sure the plaintext is ignored by git to prevent accidental checkins
  gitignore=${root}/.gitignore
  relative=$(echo ${plainfile} | sed -e "s,^${root}/*,,")
  if [ "X$(grep ${relative} ${gitignore})X" = "XX" ]; then
    if [ ${DRY_RUN:-unset} = "unset" ]; then
      echo ${relative} >> ${gitignore}
      sort ${gitignore} > ${gitignore}.tmp
      mv ${gitignore}.tmp ${gitignore}
    else
      echo "[Add ${relative} to ${gitignore}]"
    fi
  fi

  if [ -f ${plainfile} ]; then
    if [ ${plainfile} -nt ${cipherfile} ]; then
      encrypt ${plainfile}
      cmd touch ${plainfile} ${cipherfile}
    elif [ ${cipherfile} -nt ${plainfile} ]; then
      decrypt ${cipherfile}
      cmd touch ${plainfile} ${cipherfile}
    fi
  else
    decrypt ${cipherfile}
    cmd touch ${plainfile} ${cipherfile}
  fi
done

# If X11 isn't installed, we need to prompt for XQuartz before going further.
if [ ${OS} = "Darwin" ]; then
  if [ ! -d /opt/X11 ]; then
    echo "Install XQuartz before going any further."
    echo "http://xquartz.macosforge.org/"
    exit 1
  fi
fi

# Sort out the bin directory
[ -d ${HOME}/bin ] || cmd mkdir ${HOME}/bin
for file in $(find ${root}/bin -type f); do
  filename=$(basename ${file})
  case ${filename} in
    (ipsort|mailtail|mark_as_read)
      if bytemark_box; then
        symlink ${file} bin/$(basename ${file})
      fi
      ;;
    (*)
      symlink ${file} bin/$(basename ${file})
      ;;
  esac
done
symlink modules/git-wip/git-wip bin/git-wip

# Install the packages we need
pkg bash bash-completion ctags curl gnupg git nmap vim wget
if [ ${OS} = "Darwin" ]; then
  pkg apc boto bundler go graphviz hub httpie imagick mercurial mysql nginx \
    paramiko php postgresql pstree pyflakes redis requests requests-oauth ruby \
    tornado twig vagrant watch xdebug xhprof
fi
if bytemark_box; then
  pkg mutt
fi
if ! which make > /dev/null 2>&1; then
  pkg make
fi

# Generate .gitconfig
if [ ${DRY_RUN:-set} != "set" ]; then
  sed -e s/___EMAIL___/$(git config user.email || echo conor@mcdermottroe.com)/ ${root}/.gitconfig.template > ${HOME}/.gitconfig
fi

# Now link in the dotfiles
symlink .bash_login
symlink .bashrc
symlink .cvsignore
symlink .inputrc
symlink .mailmap
if bytemark_box; then symlink .muttrc; fi
symlink .tcsh
symlink .tcshrc
symlink .vim
symlink .vimrc

# Extra bash completions
bash_completion modules/completion-ruby/completion-bundle
bash_completion modules/completion-ruby/completion-gem
bash_completion modules/completion-ruby/completion-jruby
bash_completion modules/completion-ruby/completion-rails
bash_completion modules/completion-ruby/completion-rake
bash_completion modules/completion-ruby/completion-ruby
bash_completion modules/vagrant-bash-completion/vagrant
if [ ${OS} = "Darwin" ]; then
  bash_completion ${BREW_PREFIX}/Library/Contributions/brew_bash_completion.sh
fi

# Prune the bash completions to the things we have
completion_dir=/etc/bash_completion.d
if which brew > /dev/null 2>&1; then
  completion_dir="${BREW_PREFIX}${completion_dir}"
fi
for _completion_file in $(find ${completion_dir} -type l -o -type f); do
  _have=$(awk '/^have / { print $2; exit}' ${_completion_file})
  if [ -n "${_have}" ]; then
    if ! type ${_have} > /dev/null 2>&1; then
      cmd rm ${_completion_file}
    fi
  fi
done

# PHP extras
if [ ${OS} = "Darwin" ]; then
  pear_channel pear.pdepend.org pear.phpmd.org pear.phpunit.de \
    components.ez.no pear.symfony-project.com pear.phpundercontrol.org \
    pear.symfony.com pear.netpirates.net
  pear_install PHP_PMD phpmd/PHP_PMD
  pear_install phpcpd phpunit/phpcpd
  pear_install PHP_CodeSniffer
  pear_install PHP_CodeBrowser phpunit/PHP_CodeBrowser
  pear_install PHPUnit phpunit/PHPUnit
  pear_install phpDox pear.netpirates.net/phpDox-alpha
fi
